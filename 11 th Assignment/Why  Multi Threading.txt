Why MultiThreading is used in java?

Multithreading in Java is a process of executing multiple threads simultaneously.
A thread is a lightweight sub-process, the smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.
However, we use multithreading than multiprocessing because threads use a shared memory area. 
They don't allocate separate memory area so saves memory, and context-switching between the threads takes less time than process.
Java Multithreading is mostly used in games, animation, etc.

Advantages of Java Multithreading
1) It doesn't block the user because threads are independent and you can perform multiple operations at the same time.
2) You can perform many operations together, so it saves time.
3) Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread.

    Usually processes are heavy. Java introduced the light weight processes called threads, that exist inside a process. 
These light weight process can run in parallel for ex when you are using MSWord, it allows you to type while at the same time it checks for your spelling mistakes.
 So there are two threads running inside MSWord, one to accept your inputs and second to validate your input.
Using threads, java can perform parallel operations at the same time.